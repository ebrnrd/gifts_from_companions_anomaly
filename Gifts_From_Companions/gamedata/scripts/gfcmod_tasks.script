
-- This script is just a modified version of the task_fetch.script, I basically added custom dialogs and conditions to adapt it to the mod systems.

local stored_npc_task_giver -- the random companion obj that gave the task
local gfcmod_tasks_cache_tbl = {} -- saved data (task_giver_name)

local fetch_items = {} -- list of all possible companion gift task items
local fetch_rank_tier = {} -- tiers of the items

local patch_general = {
	["army"] = {
		["freedom_patch"]    = 0,
		["bandit_patch"]     = 0,
		["stalker_patch"]    = 0,
		["csky_patch"]       = 0,
		["monolith_patch"]   = 0,
	},
	["bandit"] = {
		["army_patch"]       = 0,
		["dolg_patch"]       = 0,
		["stalker_patch"]    = 0,
		["csky_patch"]       = 0,
		["ecolog_patch"]     = 0,
	},
	["csky"] = {
		["army_patch"]       = 0,
		["bandit_patch"]     = 0,
		["renegade_patch"]   = 0,
	},
	["dolg"] = {
		["freedom_patch"]    = 0,
		["bandit_patch"]     = 0,
		["monolith_patch"]   = 0,
	},
	["freedom"] = {
		["dolg_patch"]       = 0,
		["army_patch"]       = 0,
		["monolith_patch"]   = 0,
	},
	["killer"] = {
		["freedom_patch"]    = 0,
		["bandit_patch"]     = 0,
		["dolg_patch"]       = 0,
		["army_patch"]       = 0,
		["monolith_patch"]   = 0,
	},
	["monolith"] = {
		["army_patch"]       = 0,
		["freedom_patch"]    = 0,
		["bandit_patch"]     = 0,
		["stalker_patch"]    = 0,
		["csky_patch"]       = 0,
		["dolg_patch"]       = 0,
	},
	["stalker"] = {
		["bandit_patch"]     = 0,
	},
	["greh"] = {
		["army_patch"]       = 0,
		["freedom_patch"]    = 0,
		["bandit_patch"]     = 0,
		["stalker_patch"]    = 0,
		["csky_patch"]       = 0,
		["dolg_patch"]       = 0,
	},
	["renegade"] = {
		["army_patch"]       = 0,
		["dolg_patch"]       = 0,
		["stalker_patch"]    = 0,
		["csky_patch"]       = 0,
		["ecolog_patch"]     = 0,
	},
}

local faction_lookup = { -- List of factions used in patch tasks
	"stalker",
	"dolg",
	"freedom",
	"csky",
	"ecolog",
	"killer",
	"army",
	"bandit",
	"monolith"
}

function set_stored_npc_task_giver(npc)
	if npc then
		stored_npc_task_giver = npc
		gfcmod_tasks_cache_tbl.task_giver_name = stored_npc_task_giver:character_name()
	end
end

xr_effects.gfcmod_complete_task_inc_friendship = function(actor, npc, p)
	local friendship_to_add = p[1] and tonumber(p[1])
	gfcmod.add_friendship(friendship_to_add, "task_complete")
end

xr_effects.gfcmod_fail_task_dec_friendship = function(actor, npc, p)
	local friendship_to_remove = p[1] and tonumber(p[1])
	gfcmod.add_friendship(-friendship_to_remove, "task_fail")
end

xr_effects.reset_gfcmod_companion_task = function (actor, npc, p) -- reset the task on complete of fail so that the player can receive new companion tasks
	gfcmod.reset_gfcmod_companion_task()
	printdbg("Resetted gfcmod companion task")

end
	
xr_effects.gfcmod_reward_stash = function(actor,npc,p)
	local stash_chance
	local current_friendship_stage = gfcmod.get_current_friendship_stage()
	
	if not current_friendship_stage then return end
	
	if current_friendship_stage == "bad" then stash_chance = 0
	elseif current_friendship_stage == "normal" then stash_chance = 0.05
	elseif current_friendship_stage == "good" then stash_chance = 0.1
	elseif current_friendship_stage == "excellent" then stash_chance = 0.2
	else stash_chance = 0.05 end
		
	if stash_chance and math.random() <= stash_chance then
		local bonus
		if math.random(1,100) <= 50 then
			local stash_bonus = treasure_manager.stash_bonus
			if stash_bonus and (#stash_bonus > 0) then
				bonus = {stash_bonus[math.random(#stash_bonus)]}
			end
		end
		treasure_manager.create_random_stash(nil,nil,bonus, true)
	end
end

xr_effects.gfcmod_gift_reward_and_remove = function(actor, npc, p) --	Remove fetch items and give friendship reward:
--	Description:  Removes fetch task items and gives actor friendship reward based on item value
--	Usage: gfcmod_gift_reward_and_remove( p[1]:p[2] )
--	Parameters:
--		p[1] (type: string) Var name given to fetch task items
--		p[2] (type: float) Multiplier for cost of items to apply to reward value (optional; default = 1.0)
--	Return value (type: none): none, removes fetch items and gives actor reward
	
	-- Get fetch items
	local sec = load_var( db.actor, p[1] )
	if not (sec) then return end
	
	local sim = alife()
	
	-- Extract artefact if its in container
	if string.find(sec,"af_") and (not db.actor:object(sec)) then
		local break_con
		local break_arty
		local id_combo
		local search_cont = { "lead_box" , "af_aam", "af_aac", "af_iam" }
		for i=1,#search_cont do
			if db.actor:object(sec .. "_" .. search_cont[i]) then
				break_arty = sec
				break_con = search_cont[i]
				id_combo = db.actor:object(sec .. "_" .. search_cont[i]):id()
				break
			end
		end

		if id_combo and break_con and break_arty and ini_sys:section_exist(break_con) then
			printdbg("/ Artefact container found, artefact [%s] - contairer [%s]", break_arty, break_con)
			alife_create_item(break_arty, db.actor)
			alife_create_item(break_con, db.actor)
			alife_release_id(id_combo)
			
			-- play effect
			level.add_cam_effector('camera_effects\\item_use.anm', 8053, false,'')
			xr_effects.play_inv_aac_open()
		end
	end
	
	local function timer() -- delay for 1 sec, to register alife changes
		
		-- Gather task items and cost
		local count = load_var( db.actor, (p[1] .. "_count") ) or 1
		local mult = tonumber(p[2]) or 1
		local max_use = IsItem("multiuse",sec) or 1
		local cost = ini_sys:r_float_ex(sec,"cost") * (1 / max_use)
		
		local last_obj
		local collected_itms = {}
		local total_cost, remain = 0,0
		local cur_count = count
		local use_con = (max_use == 1) and (not IsItem("device",sec)) and (not IsItem("battery", sec)) and true or false
		local function itr(temp, obj)
			if (obj:section() == sec) then
				local cnt = (max_use > 1) and obj:get_remaining_uses() or 1
				local con = use_con and obj:condition() or 1
				
				collected_itms[obj:id()] = cnt
				total_cost = total_cost + (cost * cnt * (con * con) * mult)
				cur_count = cur_count - cnt
				
				last_obj = obj
			end
			if (cur_count <= 0) then
				if (cur_count < 0) then
					remain = math.abs(cur_count)
				end
				return true
			end
			--return false
		end
		db.actor:iterate_inventory(itr, nil)
		
		-- Check availability
		if is_empty(collected_itms) then
			printe("! ERROR: fetch_reward_and_remove | no fetch item found!")
			return true
		end
		if (total_cost < 50) then 
			total_cost = 50
			printf("~ Warning: fetch_reward_and_remove | total_cost is below 50")
		end
	
		-- Reward value for artefacts depends on progression difficulty
		if IsArtefact(last_obj) then
			local eco = game_difficulties.get_eco_factor("type") or 0.5
			local factor = (eco == 3 and 0.4) or (eco == 2 and 0.5) or 0.6
			total_cost = total_cost * factor
		end
		--
		
		--local delta =  math.floor(total_cost * 0.1)
		--local min_reward = (total_cost - delta)
		--local max_reward = (total_cost + delta)
		--local random_reward = math.random(min_reward, max_reward)
		local friendship_to_add = math.floor(total_cost / 600)
		if friendship_to_add > 0 then
			gfcmod.add_friendship(friendship_to_add, "task_complete")
		end
	
		-- Give task items to npc
		local trade_npc = stored_npc_task_giver
		for k,v in pairs(collected_itms) do
			if trade_npc then
				local obj = level.object_by_id(k)
				if obj then
					db.actor:transfer_item(obj, trade_npc)
				end
			else
				alife_release_id(k)
			end
		end
		if (remain > 0) and IsItem("multiuse",sec) then
			alife_create_item(sec, db.actor, {uses = remain})
			local last_obj_uses = last_obj:get_remaining_uses()
			if last_obj_uses and (last_obj_uses > remain) then
				local uses = (last_obj_uses - remain)
				alife_process_item(last_obj:section(), last_obj:id(), {uses = uses})
			end
		end
		
		news_manager.relocate_item(db.actor, "out", sec, count)
	
		return true
	end
		
	CreateTimeEvent(0,"delay_reward", 1, timer)
end

xr_effects.remove_gift_item = function(actor,npc,p)
	local section = load_var(db.actor,p[1])
	if (section and db.actor:object(section)) then
		local amt = p[2] or load_var(db.actor,p[1].."_count") or 1
		local companion_npc = stored_npc_task_giver
		if (companion_npc) then 
			local function transfer_object_item(itm)
				if (itm:section() == section and amt > 0) then
					db.actor:transfer_item(itm, companion_npc)
					amt = amt - 1
				end
				if (amt <= 0) then 
					return true
				end
				return false
			end
			db.actor:inventory_for_each(transfer_object_item)
		else
			xr_effects.remove_item(actor, npc, {section,amt})	
		end
	end
end


function show_gfcmod_fetch_task_news(task_id, section, amount)
	if not (task_id and section) then
		return true
	end
	
	task_id = string.sub(task_id,1,-7) or "" -- because it ends with fetch
	amount = amount or 1
	local extra = ""
	if (ini_sys:r_string_ex(section,"kind") == "i_arty") then
		extra = " " .. game.translate_string("st_ui_artefact")
	end
	
	local clr = utils_xml.get_color("pda_white") --"%c[255,238,153,26]"
	local news_caption = game.translate_string("ui_inv_needs") .. ":" --game.translate_string(task_manager.task_ini:r_string_ex(task_id, "title")) or "error"
	local news_ico = task_manager.task_ini:r_string_ex(task_id, "icon") or "ui_inGame2_D_Sisshik"
	local news_text = ui_item.get_sec_name(section) .. extra .. clr .. " (x" .. amount .. ")"
		
	db.actor:give_talk_message2(news_caption, news_text, news_ico, "iconed_answer_item")
	
	return true
end




	


---------------------------< Effects >---------------------------
local function get_suitable_item(tbl,rank)
	local temp = {}
	for sec,tier in pairs(tbl) do
		if (not rank) or (rank and fetch_rank_tier[rank] and fetch_rank_tier[rank][tier]) then
			temp[#temp + 1] = sec
			printf("- Fetch items | found proper item [%s] tier (%s) for rank (%s)", sec, tier, rank)
		end
	end
	return (#temp > 0) and temp[math.random(#temp)]
end

xr_effects.setup_gfcmod_gift_task2 = function(actor,npc,p) -- setup_supplies_fetch_task
	-- Pick a random item from the list:
	-- param 1 - var name
	-- param 2 - items type
	-- param 2 - min count
	-- param 3 - max count
	local npc = stored_npc_task_giver
	local id  = npc and npc:id()
	local npc_comm = npc and character_community(npc) or "stalker"
	local npc_rank = ranks.get_player_rank_name() or "novice"
	local sec
	local cnt

	local itms = {} -- non-key table
			
	-- expand supplies list to include drinks and smoke if the task giver is not monolith
	if (p[2] == "supplies") and (npc_comm ~= "monolith") then
		itms = fetch_items["supplies"]
		for sec,tier in pairs(fetch_items["drink"]) do
			itms[sec] = tier
		end
		
	-- Gather patches of NPC's enemy factions
	elseif (p[2] == "patch_general") then
		local patches = {}
		for i=1,#faction_lookup do
			if game_relations.is_factions_enemies(faction_lookup[i], npc_comm) then
				local comm
				if (faction_lookup[i] == "killer") then comm = "merc"
				elseif (faction_lookup[i] == "dolg") then comm = "duty"
				else comm = faction_lookup[i]
				end
				
				local patch =  comm .. "_patch"
				patches[patch] = 0
			end
		end
		
		if is_empty(patches) then
			patches = patch_general[npc_comm]
		end
		
		itms = patches
	
	-- Gather suitable repair kits
	elseif (p[2] == "repair") then
	
		-- Get NPC's weapon
		local obj_wep = npc:best_weapon()
		local sec_wep = obj_wep and obj_wep:section()
		
		-- Gather proper repair kits
		local repair_kits = {
			["sharpening_stones"] = 0,
			["sewing_kit_b"] = 0,
		}
		if sec_wep then
			local wep_type = ini_sys:r_string_ex(sec_wep,"repair_type") or ""
			for sec,tier in pairs(fetch_items["repair"]) do
				local kit_type = parse_list(ini_sys,sec,"repair_only",true)
				if kit_type[wep_type] then
					repair_kits[sec] = tier
				end
			end
		end
			
		itms = repair_kits
			
	-- Gather suitable weapons
	elseif (p[2] == "weapons") then
		local f = faction_expansions.faction[npc_comm]
		local npc_preference = f and f["weapon"] or ""
		
		-- Collects weapons suitable for npc rank
		local wpn_by_rank = {}
		if fetch_items["weapons_" .. npc_rank] then
			local tbl = fetch_items["weapons_" .. npc_rank]
			for sec,tier in pairs(tbl) do
				wpn_by_rank[sec] = tier
			end
		end
		
		-- Collects weapons suitable for npc faction
		local wpn_by_ref = {}
		if fetch_items["weapons_" .. npc_preference] then
			local tbl = fetch_items["weapons_" .. npc_preference]
			for sec,tier in pairs(tbl) do
				wpn_by_ref[sec] = tier
			end
		end
		
		-- collect suitable weapons
		local wpns = {}
		for sec,tier in pairs(wpn_by_rank) do
			if wpn_by_ref[sec] then
				wpns[sec] = tier
			end
		end
		for sec,tier in pairs(wpn_by_ref) do
			if wpn_by_rank[sec] then
				wpns[sec] = tier
			end
		end
		
		if is_not_empty(wpns) then
			itms = wpns
		else
			itms = fetch_items["weapons"]
		end
	else
		itms = fetch_items[p[2]]
	end
	
	if not (itms and is_not_empty(itms)) then
		printe("! ERROR: %s | fetch list [%s] is invalid", p[1], p[2])
	end
	
	local min_count = (p[3] and tonumber( p[3] ) or 1)
	local max_count = (p[4] and tonumber( p[4] ) or min_count)
	sec = get_suitable_item(itms, npc_rank) or random_key_table(itms)
	cnt = math.random( min_count, max_count )

	save_var( db.actor, p[1], sec )
	save_var( db.actor, (p[1] .. "_count"), cnt )
	printdbg("sec: " .. sec .. "amount: " .. cnt)

end	

xr_effects.setup_gfcmod_gift_task = function(actor,npc,p)
-- param1 - variable name
-- param2 - count
-- param3+ - sections

	if (p[1] and p[2] and p[3]) then
		local sec
		local cnt
		sec = #p > 3 and p[math.random(3,#p)] or p[3]
		if (sec and ini_sys:section_exist(sec)) then
			cnt = tonumber(p[2]) or 1
			save_var( db.actor, p[1], sec )
			if (cnt > 1) then
				save_var( db.actor, (p[1] .. "_count"), cnt )
			end
			printdbg("setup_gfcmod_gift_task has saved vars: " .. sec .. " " .. cnt .. "at " .. p[1]) 
		else
			printe("!ERROR: xr_effects:setup_gfcmod_gift_task - invalid section %s",sec)
		end
	end
		
end


--======== FUNCTORS ========--

-- TITLE FUNCTORS
function task_functor.gfcmod_gift_task_title_f(task_id,field,p,tsk)
	local fetch = db.actor and ui_item.get_sec_name(load_var(db.actor,task_id,""))
	local count = fetch and load_var(db.actor,task_id.."_count") or 1
	local companion_name = gfcmod_tasks_cache_tbl and gfcmod_tasks_cache_tbl.task_giver_name or "your companion"
	if not fetch or fetch == "" or not count then
		return strformat(game.translate_string("gfcmod_gift_task_1_title_static"))
	end
	if (count > 1) then
		return strformat((game.translate_string("gfcmod_gift_task_1_title") or ""),fetch .. " x" .. tostring(count),companion_name)
	end
	return strformat(game.translate_string("gfcmod_gift_task_1_title") or "",fetch,companion_name)
end

-- DESCRIPTION FUNCTORS
function task_functor.gfcmod_gift_task_descr_f(task_id,field,p,tsk)
	if (tsk.stage == 1) then
		return game.translate_string("st_return_for_reward")
	end
	local fetch = db.actor and ui_item.get_sec_name(load_var(db.actor,task_id,""))
	local count = fetch and load_var(db.actor,task_id.."_count") or 1
	local companion_name = gfcmod_tasks_cache_tbl and gfcmod_tasks_cache_tbl.task_giver_name or "your companion"
	if not fetch or fetch == "" or not count then
		return strformat(game.translate_string("gfcmod_gift_task_1_descr_static"))
	end
	if (count > 1) then
		return strformat((game.translate_string("gfcmod_gift_task_1_descr") or ""),companion_name,fetch .. " x" .. tostring(count))
	end
	return strformat(game.translate_string(p) or "",fetch)
end

-- TARGET FUNCTORS
function task_functor.gfcmod_gift_task_target_f(task_id,field,p,tsk)
	if (tsk.stage == 1) then
		local id = tsk.task_giver_id
		if (id) then
			return id
		end
	end
end

-- STATUS FUNCTORS
task_status_functor.actor_has_gfcmod_gift_item = function(tsk,task_id)
	local actor = db.actor
	local section = actor and load_var(actor,task_id)
	if (not section) then
		return
	end
	
	local item = section and actor:object(section)
	if (item ~= nil) then 
		local count = load_var(actor,task_id.."_count")
		if (count and count > 1) then
			local cnt = utils_item.get_amount(db.actor, section, 1)
			if (cnt >= count) then
				tsk.stage = 1
			else
				tsk.stage = 0
			end
			return
		end
		tsk.stage = 1 -- should never happen but in such case let player finish quest for free
	else 
		tsk.stage = 0 
	end 
end



xr_effects.gfcmod_reset_companion_need = function(actor,npc,p)
	local tm = task_manager.get_task_manager()
	local task_info = tm.task_info
	local giver_id = task_info[p[1]].task_giver_id
	gfcmod.gfcmod_reset_companion_stored_need(giver_id)
end




---------------------------< Callbacks >---------------------------
local function save_state(m_data)
	m_data.gfcmod_tasks_cache_tbl = gfcmod_tasks_cache_tbl
end

local function load_state(m_data)
	gfcmod_tasks_cache_tbl = m_data.gfcmod_tasks_cache_tbl or {}
end

function on_game_start()
	local ini_fetch = ini_file("items\\settings\\fetch_list.ltx")
	local n = 0
	local result, id, value = "","",""
	
	local list = {}
	n = ini_fetch:line_count("fetch_list")
	for i=0,n-1 do
		result, id, value	= ini_fetch:r_line_ex("fetch_list",i,"","")
		list[#list + 1] = id
	end
	
	n = ini_fetch:line_count("fetch_tiers")
	for i=0,n-1 do
		result, id, value	= ini_fetch:r_line_ex("fetch_tiers",i,"","")
		if id and value then
			fetch_rank_tier[id] = {}
			fetch_rank_tier[id][0] = true
			local nums = str_explode(value,",")
			for j=1,#nums do
				local m = tonumber(nums[j]) or 0
				fetch_rank_tier[id][m] = true
			end
		end
	end

	for k=1,#list do
		local category = list[k]
		fetch_items[category] = {}
		
		n = ini_fetch:line_count(category)
		for i=0,n-1 do
			result, id, value	= ini_fetch:r_line_ex(category,i,"","")
			if id and ini_sys:section_exist(id) then
				fetch_items[category][id] = (value == "true" and 0) or ini_sys:r_float_ex(id,"tier") or 0
			else
				printe("! WARNING: fetch_list.ltx | wrong section name [%s]", id)
			end
		end
	end

	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	
end