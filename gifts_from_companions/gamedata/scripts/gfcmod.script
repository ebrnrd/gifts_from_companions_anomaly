--[[

==== CREDITS ====

Thanks to Darkasleif and their Chatty Companions Addon that inspired me to learn LUA and mod one of my favorite ever games. I used your mod to understand what I was even doing.
Thanks to the authors of the Anomaly Modding Book for taking the time to write it, very helpful, essential for me.
Thanks to forsiid for the constant help with the russian translations.
Thanks to NLTP_ASHES for the big help with the dialog system and other innumerable things
Thanks to xcvb for the many tips and help

]]

-- SETTINGS --
local max_timer --min time between gifts
local min_timer --max time between gifts
local gift_chance -- chance to receive gift
local friendship_timer -- time between passive friendship increment
local friendship_on_npc_death_mult
local friendship_on_monster_death_mult
local hide_friendship_messages = false
local companions_quests_toggle
local task_timer
local debug_mode = false

-- CONSTANTS --
local show_time = 5000 -- how long the notifications stay on the screen
local max_gift_distance = 30 --max distance from companion to player to give gift
local random_messages_number = 5 -- the total number of gift phrases in st_gfcmod_messages.xml
local temp_friendship_timer = 20 -- seconds between each temp friendship check

local companion_needs_type_tbl = {"delivery", "delivery"}

local clr_g = utils_xml.get_color("d_green")
local clr_w = utils_xml.get_color("white")

-- VARIABLES --
local gfcmod_companions_tbl = {} -- table that contains the player companions. Here I store the companions id and some variables associated with them like the gifts category assigned to the companion

local tg_temp_friendship_target -- timer to check when to add the accumulated temp_friendship to the actual friendship
local temp_friendship = 0 -- value that accumulates while in combat and used to calculate the friendship once combat has ended
local temp_friendship_type -- used to display the right phrases in messages related to friendship increase or decrease
local temp_friendship_p = {} -- used mainly to pass arguments to friendship changes like the type
local max_friendship = 100 -- this changes based on the number of companions
local enemy_table = {} -- table to store enemies around player

local n = 1
local is_first_load = false -- used to offset the timers between play sessions
local gt = game.translate_string
local has_companion_task = false -- used to limit companion tasks to 1

local gfcmod_cache_tbl = {} --table with persistent data (friendship, tg_gift_target, tg_friendship_target, tg_last)

--==== FUNCTIONS ====--

-- System

function save_state(m_data)
    m_data.gfcmod_cache_tbl = gfcmod_cache_tbl
    m_data.gfcmod_companions_tbl = gfcmod_companions_tbl
end

function load_state(m_data)
    gfcmod_cache_tbl = m_data.gfcmod_cache_tbl or {}
    gfcmod_companions_tbl = m_data.gfcmod_companions_tbl or {}
end

function on_option_change()
    load_gfcmod_settings()
    calculate_tg_gift_target()
    calculate_tg_friendship_target()
    calculate_tg_task_target()
end

function on_game_load()
    load_gfcmod_settings()
end

function load_gfcmod_settings()
    min_timer = gfcmod_mcm.get_config("min_timer")
    max_timer = gfcmod_mcm.get_config("max_timer")
    gift_chance = gfcmod_mcm.get_config("gift_chance")
    friendship_timer = gfcmod_mcm.get_config("friendship_timer")
    friendship_on_npc_death_mult = gfcmod_mcm.get_config("friendship_on_npc_death_mult")
    friendship_on_monster_death_mult = gfcmod_mcm.get_config("friendship_on_monster_death_mult")
    hide_friendship_messages = gfcmod_mcm.get_config("hide_friendship_messages")
    companions_quests_toggle = gfcmod_mcm.get_config("companions_quests_toggle")
    task_timer = gfcmod_mcm.get_config("task_timer")
    debug_mode = gfcmod_mcm.get_config("debug_mode")
end

function calculate_tg_gift_target() -- calculate time for next gift
    local tg = time_global()
    gfcmod_cache_tbl.tg_gift_target = tg + math.random(min_timer*1000, max_timer*1000)
end

function calculate_tg_friendship_target() -- calculate time for next passive friendship increment
    local tg = time_global()
    gfcmod_cache_tbl.tg_friendship_target = tg + friendship_timer*1000
end

function calculate_tg_temp_friendship_target() -- calculate time for next passive friendship increment
    local tg = time_global()
    tg_temp_friendship_target = tg + temp_friendship_timer*1000
end

function calculate_tg_task_target() -- calculate time for next companion task
    local tg = time_global()
    gfcmod_cache_tbl.tg_task_target = tg + task_timer*1000
end

-- Companions manager

function gfcmod_update_companions_tbl()
    -- Updates the gfcmod_companions_tbl leaving only non story characters,
    -- also initialize the .category for new added companions

    if axr_companions.get_companion_count() == 0 then
        empty_table(gfcmod_companions_tbl)
        return
    end

    -- remove not companions
    local temp_companion_tbl = gfcmod_companions_tbl or {}
    if temp_companion_tbl then
        for i,c in pairs(temp_companion_tbl) do
            local obj = level.object_by_id(i) or nil
            if not (obj and obj:has_info("npcx_is_companion") and obj:alive()) then
                gfcmod_companions_tbl[i] = nil
                --printdbg("removed id " .. i .. " from gfcmod_companions_tbl")
            end
        end    
    end

    -- add new companions
    local companion_table = axr_companions.list_actor_squad_by_id()
    for i, c in pairs(companion_table) do
        local se_obj = alife():object(c)
        local squad = se_obj and get_object_squad(se_obj)

        if not get_object_story_id(se_obj.id) and not (squad and get_object_story_id(squad.id)) then
            local companion_id = c
            if not gfcmod_companions_tbl[companion_id] then
                gfcmod_companions_tbl[c] = {}
                gfcmod_companions_tbl[c].category = "any"
            end
        end
    end

    for i, c in pairs(gfcmod_companions_tbl) do
        local category_found = c.category or "category not found"
        --printdbg("Companion id: " .. i .. " | Category: " .. category_found)
    end
end

function gfcmod_get_random_companion() -- gets a random companion obj
    if axr_companions.get_companion_count() == 0 then
        return
    end

    local companions_id_tbl = {}
    for i, c in pairs(gfcmod_companions_tbl) do
        table.insert(companions_id_tbl, i)
        --printdbg("companion id added: " .. i)
    end
    if #companions_id_tbl < 0 then
        return
    end
    local random_companion_id = companions_id_tbl[math.random(#companions_id_tbl)]
    --printdbg("random companion id: " .. random_companion_id)
    return level.object_by_id(random_companion_id)
end

function gfcmod_get_companions_count() -- gets the number of the player's companions
    local companions_tbl = {}
    for i, c in pairs(gfcmod_companions_tbl) do
        table.insert(companions_tbl, i)
    end
    return #companions_tbl
end

function gfcmod_set_companion_in_random_need(companion)
    local companion_id = companion:id()
    if not companion_id then return end
    if not gfcmod_companions_tbl[companion_id] then return end
    if gfcmod_companions_tbl[companion_id].in_need then return end
    
    local need_type = companion_needs_type_tbl[math.random(#companion_needs_type_tbl)]
    gfcmod_companions_tbl[companion_id].in_need = "delivery"
    
    local obj = level.object_by_id(companion_id)
    local companion_name = obj:character_name() or "Companion"
    local msg = companion_name .. ": " .. "Hey man, I need to talk to you when you have a second"
    news_manager.send_tip(db.actor, msg, nil, nil, show_time)
end

function gfcmod_reset_companion_stored_need(companion_id)
    if not gfcmod_companions_tbl[companion_id] or not gfcmod_companions_tbl[companion_id].in_need then return end
    gfcmod_companions_tbl[companion_id].in_need = nil
    printdbg("Reset companion : " .. companion_id .. " need")
end



-- Friendship manager

function add_friendship(friendship_to_add, type, p) -- friendship_to_add = friendship to add to the total friendship, type = the type of friendship increment (passive or other)
    -- p for now is used for custom paramaters for special cases (like revenge)
    if not gfcmod_cache_tbl.friendship then
        gfcmod_cache_tbl.friendship = 0
        return
    end

    if friendship_to_add == 0 then
        return
    end
    
    local msg 
    local friendship_increase_or_decrease
    local last_friendship_stage = get_current_friendship_stage()

    if friendship_to_add > 0 then
        friendship_increase_or_decrease = "increase"
        gfcmod_cache_tbl.friendship = gfcmod_cache_tbl.friendship + friendship_to_add

        if gfcmod_cache_tbl.friendship < 0 then gfcmod_cache_tbl.friendship = 0 end
        if gfcmod_cache_tbl.friendship > max_friendship then gfcmod_cache_tbl.friendship = max_friendship end
          
    end
    
    if friendship_to_add < 0 then
        friendship_increase_or_decrease = "decrease"
        gfcmod_cache_tbl.friendship = gfcmod_cache_tbl.friendship + friendship_to_add

        if gfcmod_cache_tbl.friendship < 0 then gfcmod_cache_tbl.friendship = 0 end
        if gfcmod_cache_tbl.friendship > max_friendship then gfcmod_cache_tbl.friendship = max_friendship end
    end

    local current_friendship_stage = get_current_friendship_stage()

    if last_friendship_stage ~= current_friendship_stage then
        on_friendship_stage_change()
    end

    if not type then
        msg = strformat(game.translate_string("st_gfcmod_friendship_" .. friendship_increase_or_decrease .. "_basic") .. " " .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship)
    elseif type == "revenge" and p[1] and p[1] ~= "" then
        msg = strformat(game.translate_string("st_gfcmod_friendship_" .. friendship_increase_or_decrease .. "_" .. type),p[1] .. " " .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship)     
    else 
        msg = strformat(game.translate_string("st_gfcmod_friendship_" .. friendship_increase_or_decrease .. "_" .. type) .. " " .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship)
    end 

    if not hide_friendship_messages then
        news_manager.send_tip(db.actor, msg, nil, nil, show_time)
    end
end

function get_passive_friendship_increment() -- gets the passive friendship increment which is equal to the number of your companions
    local friendship_passive_increment = 0
    local companions_count = gfcmod_get_companions_count()
    if companions_count == 0 then
        return 0
    end
    friendship_passive_increment = companions_count
    return friendship_passive_increment
end

function gfcmod_set_max_friendship() -- calculates and sets the max friendship based on the players total companions number (without story companions)
    local current_companions_number = gfcmod_get_companions_count()
    max_friendship = current_companions_number * 50
    if gfcmod_cache_tbl.friendship < 0 then gfcmod_cache_tbl.friendship = 0 end
    if gfcmod_cache_tbl.friendship > max_friendship then gfcmod_cache_tbl.friendship = max_friendship end
end

function get_current_friendship() -- returns the current friendship, used mainly by gfcmod_tasks.script
    if not gfcmod_cache_tbl.friendship then
        return 0
    end
    local current_friendship = gfcmod_cache_tbl.friendship
    return current_friendship
end

function get_current_friendship_stage() -- returns the name of the current friendship stage
    if not gfcmod_cache_tbl.friendship then
        return "bad"
    end
    if gfcmod_cache_tbl.friendship <= math.floor((max_friendship / 4) * 1) then
        return "bad"
    end
    if gfcmod_cache_tbl.friendship <= math.floor((max_friendship / 4) * 2) then
        return "normal"
    end
    if gfcmod_cache_tbl.friendship <= math.floor((max_friendship / 4) * 3) then
        return "good"
    end
    if gfcmod_cache_tbl.friendship <= math.floor((max_friendship / 4) * 4) then -- xD
        return "excellent"
    end
end

function on_friendship_stage_change()
    
    local msg = strformat(gt("st_gfcmod_friendship_stage_changed") .. " " .. get_current_friendship_stage())

    if not hide_friendship_messages then
        news_manager.send_tip(db.actor, msg, nil, nil, show_time)
    end
end

function reset_temp_friendship()
    temp_friendship = 0
    temp_friendship_type = nil
    empty_table(temp_friendship_p)
end



function start_gfcmod_gift_task()
    local npc = gfcmod_get_random_companion()

    gfcmod_tasks.set_stored_npc_task_giver(npc)
    local se_obj = npc and alife( ):object( npc:id( ) )
	local giver_id = se_obj and se_obj.id
    task_manager.get_task_manager():give_task("simulation_task_gfcmod_gift_1", giver_id)
end

function reset_gfcmod_companion_task()
    gfcmod_cache_tbl.companion_task_active = false
    calculate_tg_task_target()
end



--[[
function announce_gfcmod_task()

    if not gfcmod_cache_tbl.companion_with_task_id or gfcmod_cache_tbl.companion_with_task_id == 0 then
        local npc = gfcmod_get_random_companion()
        local id = npc and npc:id()
        gfcmod_cache_tbl.companion_with_task_id = id or 0
    end
    
    if gfcmod_cache_tbl.companion_with_task_id then
        local obj = level.object_by_id(gfcmod_cache_tbl.companion_with_task_id)
        local companion_name = obj:character_name() or "Companion"
        local msg = companion_name .. ": " .. "Hey man, I need to talk to you when you have a second"
        news_manager.send_tip(db.actor, msg, nil, nil, show_time)
    end
end
]]--

-- ============= DIALOG SYSTEM ================= THANKS TO NLTP_ASHES FOR THE HELP

function add_my_dialog(character_id, dialog_list)
    dialog_list:add("gfcmod_companion_in_need_delivery")
    dialog_list:add("gfcmod_companion_settings")
 end

function is_in_gfcmod_companion_tbl(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    if not npc_id then
        return false
    end
    if gfcmod_companions_tbl[npc_id] then 
        return true
    else
        return false
    end
end

function is_companion_in_need(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    if not npc_id then
        return false
    end
    if not (gfcmod_companions_tbl[npc_id] and gfcmod_companions_tbl[npc_id].in_need) then 
        return false
    end
    if gfcmod_companions_tbl[npc_id] and gfcmod_companions_tbl[npc_id].in_need then
        return true
    end
end

function is_companion_in_need_delivery(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    if not npc_id then
        return false
    end
    if not (gfcmod_companions_tbl[npc_id] and gfcmod_companions_tbl[npc_id].in_need) then 
        return false
    end
    if gfcmod_companions_tbl[npc_id] and gfcmod_companions_tbl[npc_id].in_need and gfcmod_companions_tbl[npc_id].in_need == "delivery" then
        return true
    end
end

function is_friendship_stage_at_least_bad()
    if get_current_friendship_stage() == "bad" or get_current_friendship_stage() == "normal" or get_current_friendship_stage() == "good" or get_current_friendship_stage() == "excellent" then 
        return true
    else return false end
end

function is_friendship_stage_at_least_normal()
    if get_current_friendship_stage() == "normal" or get_current_friendship_stage() == "good" or get_current_friendship_stage() == "excellent" then
        return true
    else return false end
end

function is_friendship_stage_at_least_good()
    if get_current_friendship_stage() == "good" or get_current_friendship_stage() == "excellent" then
        return true
    else return false end
end

function is_friendship_stage_at_least_excellent()
    if get_current_friendship_stage() == "excellent" then return true
    else return false end
end

function set_companion_gifts_category_any(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "any"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_food(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "food"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_drink(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "drink"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_medical(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "medical"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_tool(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "tool"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_repair(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "repair"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_misc(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "misc"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end

function set_companion_gifts_category_ammo(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    local npc_id = npc:id()
    local category = "ammo"
    if not npc_id then
        return false
    end
    -- Check if the npc_id exists in the gfcmod_companions_tbl
    if gfcmod_companions_tbl[npc_id] then
    gfcmod_companions_tbl[npc_id].category = category
    --printdbg("category set for companion" .. npc_id .. " category: " .. (gfcmod_companions_tbl[npc_id].category or "category failed"))
    end
end



-- CALLBACKS

function actor_on_first_update() -- here I check if the variables saved in cache are valid, if they are not (for example when starting a new game), I initialize them.
    
    load_gfcmod_settings()

    calculate_tg_temp_friendship_target()

    if not gfcmod_cache_tbl.tg_gift_target or gfcmod_cache_tbl.tg_gift_target == 0 then
        gfcmod_cache_tbl.tg_gift_target = 0
        calculate_tg_gift_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_gift_target = gfcmod_cache_tbl.tg_gift_target - (gfcmod_cache_tbl.tg_last - tg)
    end
        
    if not gfcmod_cache_tbl.tg_friendship_target or gfcmod_cache_tbl.tg_friendship_target == 0 then
        gfcmod_cache_tbl.tg_friendship_target = 0
        calculate_tg_friendship_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_friendship_target = gfcmod_cache_tbl.tg_friendship_target - (gfcmod_cache_tbl.tg_last - tg)
    end

    if not gfcmod_cache_tbl.tg_task_target or gfcmod_cache_tbl.tg_task_target == 0 then
        gfcmod_cache_tbl.tg_task_target = 0
        calculate_tg_task_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_task_target = gfcmod_cache_tbl.tg_task_target - (gfcmod_cache_tbl.tg_last - tg)
    end

    if not gfcmod_cache_tbl.companion_task_active or gfcmod_cache_tbl.companion_task_active == false then
        gfcmod_cache_tbl.companion_task_active = false
    elseif gfcmod_cache_tbl.companion_task_active and gfcmod_cache_tbl.companion_task_active == true then
        gfcmod_cache_tbl.companion_task_active = true -- i know this doesn't make sense, i'm just paranoid
    end

    if not gfcmod_cache_tbl.friendship or gfcmod_cache_tbl.friendship == 0 then
        gfcmod_cache_tbl.friendship = 0
    end

    is_first_load = false

end

function actor_on_update() -- here we check the timers, when a timer is lower than the game time, it executes the code and ricalcolates the timer
    -- this function makes things happen

    n = n + 1    
    if n ~= 498 then --update frequency
        return
    end
    n = 1

    local tg = time_global()

    gfcmod_update_companions_tbl()
    
    gfcmod_cache_tbl.tg_last = tg -- the engine everytime the actual game is opened, resets the global times, this helps to calculate the delta from the tg from last session
    
    -- if the player doesn't have companions it doesn't run the rest of the code
    if gfcmod_get_companions_count() == 0 then
        gfcmod_cache_tbl.friendship = 0
        reset_temp_friendship()
        return
    end

    if debug_mode then  -- DEBUGGING
        local msg_debug = clr_g .. "current time: " .. tg .. " ".. "gift time: " .. gfcmod_cache_tbl.tg_gift_target
        news_manager.send_tip(db.actor, msg_debug, nil, nil, show_time)
        local msg_debug = clr_g .. "current time: " .. tg .. " ".. "friendship time: " .. gfcmod_cache_tbl.tg_friendship_target
        news_manager.send_tip(db.actor, msg_debug, nil, nil, show_time)
    end

    gfcmod_set_max_friendship() -- i set the max friendship before doing anything else

    -- when the temp_friendship accumulated isn't 0 it adds (or subtracts) the friendship to the total
    if tg >= tg_temp_friendship_target and temp_friendship and temp_friendship ~= 0 then
        add_friendship(temp_friendship, temp_friendship_type, temp_friendship_p)
        reset_temp_friendship()
    end

    -- passive friendship increment
    if tg >= gfcmod_cache_tbl.tg_friendship_target then  
        local friendship_increment = get_passive_friendship_increment()
        add_friendship(friendship_increment, "passive")
        calculate_tg_friendship_target()
    end

    -- companion gifts timer
    if tg >= gfcmod_cache_tbl.tg_gift_target then
        local rnd_companion = gfcmod_get_random_companion()
        local companion_id = rnd_companion and rnd_companion:id()
        if rnd_companion and rnd_companion:id() ~= 0 and distance_between(db.actor,rnd_companion) <= max_gift_distance then
            if math.random() <= gift_chance + (gfcmod_cache_tbl.friendship / max_friendship) * 0.5 then
                local category = gfcmod_companions_tbl[companion_id] and gfcmod_companions_tbl[companion_id].category or "any"
                local random_gift = gfcmod_tables.get_random_gift(category)
                local msg = clr_g .. rnd_companion:character_name() .. ": " .. clr_w .. gt("st_gfcmod_".. get_current_friendship_stage() .. math.random(1, random_messages_number))
                news_manager.send_tip(db.actor, msg, nil, rnd_companion, show_time, rnd_companion:id())
                alife_create_item(random_gift, alife():object(0))
                news_manager.relocate_item(db.actor, "in", random_gift, 1)
            end
            calculate_tg_gift_target()
        end
    end

    -- companion tasks timer
    if tg >= gfcmod_cache_tbl.tg_task_target and not gfcmod_cache_tbl.companion_task_active and companions_quests_toggle then
        --start_gfcmod_gift_task()
        local random_companion = gfcmod_get_random_companion()
        --gfcmod_set_companion_in_need(random_companion)
        --gfcmod_cache_tbl.companion_task_active = true
        gfcmod_set_companion_in_random_need(random_companion)
        calculate_tg_task_target()
    end

end

function squad_on_npc_death(squad, se_obj, killer) 
    -- thanks xcvb for this callback, this basically checks when someone dies (either your companions, enemy npc or monster)
    -- and changes the temp friendship accordingly (based on enemy rank)

    if (not killer) or se_obj.id == killer.id then return end

    local obj = level.object_by_id(se_obj.id)
    local squad = se_obj and get_object_squad(se_obj)

    -- IF COMPANION DIES
    if obj and obj:has_info("npcx_is_companion") and not get_object_story_id(se_obj.id) and not (squad and get_object_story_id(squad.id)) then
        gfcmod_cache_tbl.last_companion_killer_id = killer.id
        gfcmod_cache_tbl.last_companion_dead_name = obj:character_name()
        gfcmod_update_companions_tbl()
        gfcmod_set_max_friendship()
        if gfcmod_cache_tbl.friendship then
            local friendship = get_current_friendship()
            if math.random() <= 0.1 then -- SMALL CHANCE TO GAIN FRIENDHSIP INSTEAD OF LOSING IT
                add_friendship(math.floor(friendship * 0.5), "companion_death_good")
            else
                add_friendship(-math.floor(friendship * 0.5), "companion_death_bad")
            end
        end return
    end

    local killer_obj = level.object_by_id(killer.id)
    if not killer_obj then return end

    local killer_fits = killer_obj:id() == 0 or killer_obj:has_info("npcx_is_companion")
    if not killer_fits then return end
    
    -- IF ENEMY MUTANT KILLED
    if (IsMonster(se_obj)) then 
        
        local monster_rank = se_obj.character_rank and se_obj:character_rank() or se_obj.rank and se_obj:rank()
        if monster_rank == 0 then monster_rank = 4 end
        if friendship_on_monster_death_mult ~= 0 then
            local friendship_on_monster_death_with_rank = math.floor(monster_rank * friendship_on_monster_death_mult)
            --printdbg("friendship received for killing mutant: " .. friendship_on_monster_death_with_rank)
            temp_friendship = temp_friendship + friendship_on_monster_death_with_rank
        end
   
    -- IF ENEMY NPC KILLED
    elseif obj and not obj:has_info("npcx_is_companion") and (IsStalker(se_obj)) then

        local npc_rank_name = ranks.get_se_obj_rank_name(se_obj)
        
        if friendship_on_npc_death_mult ~= 0 then

            local friendship_on_npc_death_with_rank            
            if npc_rank_name == "novice" then
                friendship_on_npc_death_with_rank = 2
           
            elseif npc_rank_name == "trainee" then
                friendship_on_npc_death_with_rank = 3
            
            elseif npc_rank_name == "experienced" then
                friendship_on_npc_death_with_rank = 5
           
            elseif npc_rank_name == "professional" then
                friendship_on_npc_death_with_rank = 8
            
            elseif npc_rank_name == "veteran" then
                friendship_on_npc_death_with_rank = 12
           
            elseif npc_rank_name == "expert" then
                friendship_on_npc_death_with_rank = 15
            
            elseif npc_rank_name == "master" then
                friendship_on_npc_death_with_rank = 19
            
            elseif npc_rank_name == "legend" then
                friendship_on_npc_death_with_rank = 24

            else
                friendship_on_npc_death_with_rank = 5
            end       

            friendship_on_npc_death_with_rank = math.floor(friendship_on_npc_death_with_rank * friendship_on_npc_death_mult)
            if gfcmod_cache_tbl.last_companion_killer_id and gfcmod_cache_tbl.last_companion_killer_id == se_obj.id then
                friendship_on_npc_death_with_rank = friendship_on_npc_death_with_rank * 2
                temp_friendship_type = "revenge"
                temp_friendship_p[1] = gfcmod_cache_tbl.last_companion_dead_name
            else
                --printdbg("friendship received for killing npc: " .. friendship_on_npc_death_with_rank)
                temp_friendship = temp_friendship + friendship_on_npc_death_with_rank
            end
        end
    end
end

--================== CALLBACKS REGISTRATION =====================
function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("actor_on_update", actor_on_update)
    RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("squad_on_npc_death", squad_on_npc_death)
    RegisterScriptCallback("on_enemy_eval", on_enemy_eval)
    RegisterScriptCallback("on_specific_character_dialog_list", add_my_dialog)   

    is_first_load = true

end