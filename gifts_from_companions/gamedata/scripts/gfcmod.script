-- CREDITS
-- thanks to Thanks to Darkasleif and their Chatty Companions Addon that I used to figure out what I was even doing.
-- thanks to forsiid for the russian translations.


-- SETTINGS --
local max_timer --min time between gifts
local min_timer --max time between gifts
local gift_chance -- chance to receive gift
local friendship_timer -- time between passive friendship increment
local friendship_on_npc_death_mult
local friendship_on_monster_death_mult
local friendship_on_companion_death -- not used anymore, for now
local hide_friendship_messages = false
local companions_quests_toggle
local task_timer
local debug_mode = false

-- CONSTANTS --
local show_time = 5000 -- how long the notifications stay on the screen
local max_gift_distance = 30 --max distance from companion to player to give gift
local max_friendship = 100
local random_messages_number = 5 -- the total number of gift phrases in st_gfcmod_messages.xml

local clr_g = utils_xml.get_color("d_green")
local clr_w = utils_xml.get_color("white")

-- VARIABLES --
local temp_friendship = 0 -- value that accumulates while in combat and used to calculate the friendship once combat has ended
local temp_friendship_type
local enemy_table = {} -- table to store enemies around player
local npc_was_enemy 
local area_clear = true
local n = 1
local is_first_load = false
local gt = game.translate_string
local has_companion_task = false

local stored_id

local gfcmod_cache_tbl = {} --table with persistent data (friendship, tg_gift_target, tg_friendship_target, tg_last)

-- FUNCTIONS --

function save_state(m_data)
    m_data.gfcmod_cache_tbl = gfcmod_cache_tbl
end

function load_state(m_data)
    gfcmod_cache_tbl = m_data.gfcmod_cache_tbl or {}
end

function on_option_change()
    load_gfcmod_settings()
    calculate_tg_gift_target()
    calculate_tg_friendship_target()
    calculate_tg_task_target()
end

function on_game_load()
    load_gfcmod_settings()
end

function load_gfcmod_settings()
    min_timer = gfcmod_mcm.get_config("min_timer")
    max_timer = gfcmod_mcm.get_config("max_timer")
    gift_chance = gfcmod_mcm.get_config("gift_chance")
    friendship_timer = gfcmod_mcm.get_config("friendship_timer")
    friendship_on_npc_death_mult = gfcmod_mcm.get_config("friendship_on_npc_death_mult")
    friendship_on_monster_death_mult = gfcmod_mcm.get_config("friendship_on_monster_death_mult")
    friendship_on_companion_death = gfcmod_mcm.get_config("friendship_on_companion_death")
    hide_friendship_messages = gfcmod_mcm.get_config("hide_friendship_messages")
    companions_quests_toggle = gfcmod_mcm.get_config("companions_quests_toggle")
    task_timer = gfcmod_mcm.get_config("task_timer")
    debug_mode = gfcmod_mcm.get_config("debug_mode")
end

function get_random_companion() -- gets a random companion obj
    if axr_companions.get_companion_count() == 0 then
        return
    end
    local companions_table = axr_companions.list_actor_squad_by_id()
    return level.object_by_id(companions_table[math.random(#companions_table)])
end

function get_passive_friendship_increment() -- gets the passive friendship increment which is equal to the number of your companions
    local friendship_passive_increment = 0
    local companions_count = axr_companions.get_companion_count()
    if companions_count == 0 then
        return 0
    end
    friendship_passive_increment = companions_count
    return friendship_passive_increment
end

function add_friendship(friendship_to_add, type) -- friendship_to_add = friendship to add to the total friendship, type = the type of friendship increment (passive or other)

    if not gfcmod_cache_tbl.friendship then
        gfcmod_cache_tbl.friendship = 0
        return
    end

    if friendship_to_add == 0 then
        return
    end
    
    local msg 
    
    if friendship_to_add > 0 then
        gfcmod_cache_tbl.friendship = gfcmod_cache_tbl.friendship + friendship_to_add
        if gfcmod_cache_tbl.friendship > max_friendship then
            gfcmod_cache_tbl.friendship = max_friendship
        end
        if not type then
            msg = clr_g .. gt("st_gfcmod_friendship_increase_basic") .. " " .. clr_w .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship
        else 
            msg = clr_g .. gt("st_gfcmod_friendship_increase_" .. type) .. " " .. clr_w .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship
        end            
    end
    
    if friendship_to_add < 0 then
        gfcmod_cache_tbl.friendship = gfcmod_cache_tbl.friendship + friendship_to_add
        if gfcmod_cache_tbl.friendship < 0 then
            gfcmod_cache_tbl.friendship = 0
        end
        if not type then
            msg = clr_w .. gt("st_gfcmod_friendship_decrease_basic") .. " " .. clr_w .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship
        else 
            msg = clr_w .. gt("st_gfcmod_friendship_decrease_" .. type) .. " " .. clr_w .. gfcmod_cache_tbl.friendship .. "/" .. max_friendship
        end 
    end

    if not hide_friendship_messages then
        news_manager.send_tip(db.actor, msg, nil, nil, show_time)
    end

end

function calculate_tg_gift_target()
    local tg = time_global()
    gfcmod_cache_tbl.tg_gift_target = tg + math.random(min_timer*1000, max_timer*1000)
end

function calculate_tg_friendship_target()
    local tg = time_global()
    gfcmod_cache_tbl.tg_friendship_target = tg + friendship_timer*1000
end

function calculate_tg_task_target()
    local tg = time_global()
    gfcmod_cache_tbl.tg_task_target = tg + task_timer*1000
end

function get_current_friendship()
    if not gfcmod_cache_tbl.friendship then
        return 0
    end
    local current_friendship = gfcmod_cache_tbl.friendship
    return current_friendship
end

function get_current_friendship_stage()
    if not gfcmod_cache_tbl.friendship then
        return "bad"
    end
    if gfcmod_cache_tbl.friendship <= 25 then
        return "bad"
    end
    if gfcmod_cache_tbl.friendship <= 50 then
        return "normal"
    end
    if gfcmod_cache_tbl.friendship <= 75 then
        return "good"
    end
    if gfcmod_cache_tbl.friendship <= 100 then
        return "excellent"
    end
end

function start_gfcmod_gift_task()
    local npc = get_random_companion()
    
    if npc:character_name() == "Ryan Gosling" then return end -- Literally You In Drive compatibility (Ryan Gosling doesnt give quests)

    gfcmod_tasks.set_stored_npc_task_giver(npc)
    local se_obj = npc and alife( ):object( npc:id( ) )
	local giver_id = se_obj and se_obj.id
    task_manager.get_task_manager():give_task("simulation_task_gfcmod_gift_1", giver_id)
end

function reset_gfcmod_companion_task()
    gfcmod_cache_tbl.companion_task_active = false
    calculate_tg_task_target()
end


-- code straight up copied from Chatty Companions addon by Darkasleif

function on_enemy_eval(obj, enemy)
    local id = enemy:id()
    if enemy_table[id] or not obj:has_info("npcx_is_companion") or not is_enemy(enemy, db.actor, false) then
        return
    end

    enemy_table[id] = true
end

function is_enemy(obj, who, memory) 
    -- If obj exists
    if not obj then
        return false
    end

    -- If obj and who are the same
    if obj:id() == who:id() then
        return false
    end

    -- If obj is a crow
    if (obj:clsid() == clsid.crow) then
		return false 
	end

    -- If obj is not a mutant or stalker
    if not IsMonster(obj) and not IsStalker(obj) then
        return false
    end

    -- If obj is dead
    if not obj:alive() then
        return false
    end

    if IsStalker(obj) and ((who:id() == 0) or (who:id() == AC_ID)) then
        local relation = relation_registry.community_relation(character_community(obj), gameplay_disguise.get_default_comm())
        local goodwill = relation_registry.community_goodwill(character_community(obj), db.actor:id())
        -- If faction is not enemy and not fighting with actor
        if not game_relations.is_factions_enemies(obj:character_community(), character_community(db.actor):sub(7)) and not xr_combat_ignore.fighting_with_actor_npcs[obj:id()] then
            return false
        end

        -- If obj is companion and not pissed off
        if obj:has_info("npcx_is_companion") and not xr_combat_ignore.fighting_with_actor_npcs[obj:id()] then
            return false
        end

        -- if not gameplay_disguise.is_actor_disguised() and relation + goodwill >= 0 and not xr_combat_ignore.fighting_with_actor_npcs[obj:id()] then
        --     return false
        -- end

        -- If player bribe is in effect
        if xr_bribe.at_peace(character_community(obj), gameplay_disguise.get_default_comm(), obj:position():distance_to(db.actor:position())) and not xr_combat_ignore.fighting_with_actor_npcs[obj:id()] then
            return false
        end

        -- If "Rostok Under Duty Control" installed
        if gameplay_peace_zone and level.name() == "l05_bar" and character_community(db.actor):sub(7) == "army" and (character_community(obj) == "csky" or character_community(obj) == "stalker") and not xr_combat_ignore.fighting_with_actor_npcs[obj:id()] then
            return false
        end

        -- If obj has forgotten who
        if memory then
            local tg = time_global()
            local time_in_memory = tg - obj:memory_time(who)
            if (time_in_memory < 0) then
                if (time_in_memory < -120000) or (time_in_memory < -60000) then
                    return false 
                end
            else 
                if (time_in_memory > 120000) or (time_in_memory > 60000) then
                    return false
                end
            end
        end
    end

    if IsStalker(obj) then
        if npc_surrendered(obj) then
            return false
        end
    end

	return true
end

function npc_surrendered(npc)
	local st = db.storage[npc:id()]
	return st and st.victim_surrender and st.victim_surrender >= 0 and st.victim_surrender < 65534 or false
end




function squad_on_npc_death(squad, se_obj, killer)

    --if se_obj.id == killer:id() then return end
    if (not killer) or se_obj.id == killer.id then return end

    local obj = level.object_by_id(se_obj.id)

    if obj and obj:has_info("npcx_is_companion") then
        if gfcmod_cache_tbl.friendship then
            if math.random() <= 0.1 then
                temp_friendship = temp_friendship + math.floor(gfcmod_cache_tbl.friendship * 0.5)
                temp_friendship_type = "companion_death_good"
            else
                temp_friendship = temp_friendship - math.floor(gfcmod_cache_tbl.friendship * 0.5)
                temp_friendship_type = "companion_death_bad"
            end
        end return
    end

    local killer_obj = level.object_by_id(killer.id)
    if not killer_obj then return end

    local killer_fits = killer_obj:id() == 0 or killer_obj:has_info("npcx_is_companion")
    if not killer_fits then return end
    
    if (IsMonster(se_obj)) then
        
        local monster_rank = se_obj.character_rank and se_obj:character_rank() or se_obj.rank and se_obj:rank()
        if monster_rank == 0 then monster_rank = 4 end
        if friendship_on_monster_death_mult ~= 0 then
            local friendship_on_monster_death_with_rank = math.floor(monster_rank * friendship_on_monster_death_mult)
            printdbg("friendship received for killing mutant: " .. friendship_on_monster_death_with_rank)
            temp_friendship = temp_friendship + friendship_on_monster_death_with_rank
        end

    elseif (IsStalker(se_obj)) then

        local npc_rank_name = ranks.get_se_obj_rank_name(se_obj)
        
        if friendship_on_npc_death_mult ~= 0 then

            local friendship_on_npc_death_with_rank            
            if npc_rank_name == "novice" then
                friendship_on_npc_death_with_rank = 2
           
            elseif npc_rank_name == "trainee" then
                friendship_on_npc_death_with_rank = 3
            
            elseif npc_rank_name == "experienced" then
                friendship_on_npc_death_with_rank = 5
           
            elseif npc_rank_name == "professional" then
                friendship_on_npc_death_with_rank = 8
            
            elseif npc_rank_name == "veteran" then
                friendship_on_npc_death_with_rank = 12
           
            elseif npc_rank_name == "expert" then
                friendship_on_npc_death_with_rank = 15
            
            elseif npc_rank_name == "master" then
                friendship_on_npc_death_with_rank = 19
            
            elseif npc_rank_name == "legend" then
                friendship_on_npc_death_with_rank = 24

            else
                friendship_on_npc_death_with_rank = 5
            end        
            friendship_on_npc_death_with_rank = math.floor(friendship_on_npc_death_with_rank * friendship_on_npc_death_mult)
            printdbg("friendship received for killing npc: " .. friendship_on_npc_death_with_rank)
            temp_friendship = temp_friendship + friendship_on_npc_death_with_rank
        end
    end
end

function on_game_start()
    RegisterScriptCallback("squad_on_npc_death", squad_on_npc_death)
end

function in_combat()
    area_clear = true
    level.iterate_nearest(db.actor:position(), 50, iterate_func_clear)
    return not area_clear
end

function iterate_func_clear(obj)
    if stored_id ~= obj:id() and obj:id() ~= 0 and is_enemy(obj, db.actor, true) then
        area_clear = false
    end
end

function actor_on_first_update()
    -- here I check if the variables saved in cache are valid, if they are not (for example when starting a new game), I initialize them.
    load_gfcmod_settings()

    if not gfcmod_cache_tbl.tg_gift_target or gfcmod_cache_tbl.tg_gift_target == 0 then
        gfcmod_cache_tbl.tg_gift_target = 0
        calculate_tg_gift_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_gift_target = gfcmod_cache_tbl.tg_gift_target - (gfcmod_cache_tbl.tg_last - tg)
    end
        
    if not gfcmod_cache_tbl.tg_friendship_target or gfcmod_cache_tbl.tg_friendship_target == 0 then
        gfcmod_cache_tbl.tg_friendship_target = 0
        calculate_tg_friendship_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_friendship_target = gfcmod_cache_tbl.tg_friendship_target - (gfcmod_cache_tbl.tg_last - tg)
    end

    if not gfcmod_cache_tbl.tg_task_target or gfcmod_cache_tbl.tg_task_target == 0 then
        gfcmod_cache_tbl.tg_task_target = 0
        calculate_tg_task_target()
    elseif is_first_load and gfcmod_cache_tbl.tg_last and gfcmod_cache_tbl.tg_last ~= 0 then
        local tg = time_global()
        gfcmod_cache_tbl.tg_task_target = gfcmod_cache_tbl.tg_task_target - (gfcmod_cache_tbl.tg_last - tg)
    end

    if not gfcmod_cache_tbl.companion_task_active or gfcmod_cache_tbl.companion_task_active == false then
        gfcmod_cache_tbl.companion_task_active = false
    elseif gfcmod_cache_tbl.companion_task_active and gfcmod_cache_tbl.companion_task_active == true then
        gfcmod_cache_tbl.companion_task_active = true -- i know this doesn't make sense, i'm just paranoid
    end

    if not gfcmod_cache_tbl.friendship or gfcmod_cache_tbl.friendship == 0 then
        gfcmod_cache_tbl.friendship = 0
    end

    is_first_load = false

end

function actor_on_update() -- here we check the timers, when a timer is lower than the game time, it executes the code and ricalcolates the timer
    
    n = n + 1
    
    if n ~= 105 then --update frequency
        return
    end

    n = 1
    local tg = time_global()
    
    gfcmod_cache_tbl.tg_last = tg -- the engine everytime the actual game is opened, resets the global times, this helps to calculate the delta from the tg from last session
    
    -- if the player doesn't have companions it doesn't run the rest of the code
    if axr_companions.get_companion_count() == 0 then
        gfcmod_cache_tbl.friendship = 0
        return
    end

    if debug_mode then  -- DEBUGGING
        local msg_debug = clr_g .. "current time: " .. tg .. " ".. "gift time: " .. gfcmod_cache_tbl.tg_gift_target
        news_manager.send_tip(db.actor, msg_debug, nil, nil, show_time)
        local msg_debug = clr_g .. "current time: " .. tg .. " ".. "friendship time: " .. gfcmod_cache_tbl.tg_friendship_target
        news_manager.send_tip(db.actor, msg_debug, nil, nil, show_time)
    end

    -- when the temp_friendship accumulated isn't 0 it adds (or subtracts) the friendship to the total
    if temp_friendship and temp_friendship ~= 0 then
        add_friendship(temp_friendship, temp_friendship_type)
        temp_friendship = 0
        temp_friendship_type = nil
    end

    -- passive friendship increment
    if tg >= gfcmod_cache_tbl.tg_friendship_target then  
        local friendship_increment = get_passive_friendship_increment()
        add_friendship(friendship_increment, "passive")
        calculate_tg_friendship_target()
    end

    -- companion gifts timer
    if tg >= gfcmod_cache_tbl.tg_gift_target and area_clear then
        local rnd_companion = get_random_companion()
        if rnd_companion and rnd_companion:id() ~= 0 and distance_between(db.actor,rnd_companion) <= max_gift_distance then
            if math.random() <= gift_chance then
                local random_gift = gfcmod_tables.get_random_gift()
                local msg = clr_g .. rnd_companion:character_name() .. ": " .. clr_w .. gt("st_gfcmod_".. get_current_friendship_stage() .. math.random(1, random_messages_number))
                news_manager.send_tip(db.actor, msg, nil, rnd_companion, show_time, rnd_companion:id())
                alife_create_item(random_gift, alife():object(0))
                news_manager.relocate_item(db.actor, "in", random_gift, 1)
            end
            calculate_tg_gift_target()
        end
    end

    -- companion tasks timer
    if tg >= gfcmod_cache_tbl.tg_task_target and not gfcmod_cache_tbl.companion_task_active and companions_quests_toggle then
        start_gfcmod_gift_task()
        gfcmod_cache_tbl.companion_task_active = true
        calculate_tg_task_target()
    end

end



--================== CALLBACKS =====================
function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("actor_on_update", actor_on_update)
    RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("squad_on_npc_death", squad_on_npc_death)
    RegisterScriptCallback("on_enemy_eval", on_enemy_eval)   

    is_first_load = true

end